// Code generated by protoc-gen-gogo.
// source: fleet.proto
// DO NOT EDIT!

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		fleet.proto

	It has these top-level messages:
		HealthCheckRequest
		HealthCheckResponse
		MachineProperties
		UpdatedState
		UnitStateFilter
		UnitFilter
		ScheduleUnitRequest
		UnscheduleUnitRequest
		SaveUnitStateRequest
		Heartbeat
		GenericReply
		Units
		UnitStates
		UnitState
		ScheduledUnits
		ScheduledUnit
		UnitName
		Unit
		MaybeScheduledUnit
		MaybeUnit
		NotFound
		UnitFile
		UnitOption
*/
package rpc

import (
	"fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TargetState int32

const (
	TargetState_INACTIVE TargetState = 0
	TargetState_LOADED   TargetState = 1
	TargetState_LAUNCHED TargetState = 2
)

var TargetState_name = map[int32]string{
	0: "INACTIVE",
	1: "LOADED",
	2: "LAUNCHED",
}
var TargetState_value = map[string]int32{
	"INACTIVE": 0,
	"LOADED":   1,
	"LAUNCHED": 2,
}

func (x TargetState) String() string {
	return proto.EnumName(TargetState_name, int32(x))
}
func (TargetState) EnumDescriptor() ([]byte, []int) { return fileDescriptorFleet, []int{0} }

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorFleet, []int{1, 0}
}

type HealthCheckRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{0} }

type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{1} }

type MachineProperties struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MachineProperties) Reset()                    { *m = MachineProperties{} }
func (m *MachineProperties) String() string            { return proto.CompactTextString(m) }
func (*MachineProperties) ProtoMessage()               {}
func (*MachineProperties) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{2} }

type UpdatedState struct {
	UnitIds []string `protobuf:"bytes,1,rep,name=unit_ids,json=unitIds" json:"unit_ids,omitempty"`
}

func (m *UpdatedState) Reset()                    { *m = UpdatedState{} }
func (m *UpdatedState) String() string            { return proto.CompactTextString(m) }
func (*UpdatedState) ProtoMessage()               {}
func (*UpdatedState) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{3} }

type UnitStateFilter struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=load_state,json=loadState,proto3" json:"load_state,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	SubState    string `protobuf:"bytes,5,opt,name=sub_state,json=subState,proto3" json:"sub_state,omitempty"`
	MachineID   string `protobuf:"bytes,6,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *UnitStateFilter) Reset()                    { *m = UnitStateFilter{} }
func (m *UnitStateFilter) String() string            { return proto.CompactTextString(m) }
func (*UnitStateFilter) ProtoMessage()               {}
func (*UnitStateFilter) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{4} }

type UnitFilter struct {
	MachineID string `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *UnitFilter) Reset()                    { *m = UnitFilter{} }
func (m *UnitFilter) String() string            { return proto.CompactTextString(m) }
func (*UnitFilter) ProtoMessage()               {}
func (*UnitFilter) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{5} }

type ScheduleUnitRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *ScheduleUnitRequest) Reset()                    { *m = ScheduleUnitRequest{} }
func (m *ScheduleUnitRequest) String() string            { return proto.CompactTextString(m) }
func (*ScheduleUnitRequest) ProtoMessage()               {}
func (*ScheduleUnitRequest) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{6} }

type UnscheduleUnitRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *UnscheduleUnitRequest) Reset()                    { *m = UnscheduleUnitRequest{} }
func (m *UnscheduleUnitRequest) String() string            { return proto.CompactTextString(m) }
func (*UnscheduleUnitRequest) ProtoMessage()               {}
func (*UnscheduleUnitRequest) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{7} }

type SaveUnitStateRequest struct {
	Name  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State *UnitState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	TTL   int32      `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *SaveUnitStateRequest) Reset()                    { *m = SaveUnitStateRequest{} }
func (m *SaveUnitStateRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveUnitStateRequest) ProtoMessage()               {}
func (*SaveUnitStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{8} }

func (m *SaveUnitStateRequest) GetState() *UnitState {
	if m != nil {
		return m.State
	}
	return nil
}

type Heartbeat struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachineID string `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	TTL       int32  `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{9} }

type GenericReply struct {
}

func (m *GenericReply) Reset()                    { *m = GenericReply{} }
func (m *GenericReply) String() string            { return proto.CompactTextString(m) }
func (*GenericReply) ProtoMessage()               {}
func (*GenericReply) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{10} }

type Units struct {
	Units []Unit `protobuf:"bytes,1,rep,name=units" json:"units"`
}

func (m *Units) Reset()                    { *m = Units{} }
func (m *Units) String() string            { return proto.CompactTextString(m) }
func (*Units) ProtoMessage()               {}
func (*Units) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{11} }

func (m *Units) GetUnits() []Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

type UnitStates struct {
	UnitStates []*UnitState `protobuf:"bytes,1,rep,name=unit_states,json=unitStates" json:"unit_states,omitempty"`
}

func (m *UnitStates) Reset()                    { *m = UnitStates{} }
func (m *UnitStates) String() string            { return proto.CompactTextString(m) }
func (*UnitStates) ProtoMessage()               {}
func (*UnitStates) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{12} }

func (m *UnitStates) GetUnitStates() []*UnitState {
	if m != nil {
		return m.UnitStates
	}
	return nil
}

type UnitState struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=load_state,json=loadState,proto3" json:"load_state,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	SubState    string `protobuf:"bytes,5,opt,name=sub_state,json=subState,proto3" json:"sub_state,omitempty"`
	MachineID   string `protobuf:"bytes,6,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *UnitState) Reset()                    { *m = UnitState{} }
func (m *UnitState) String() string            { return proto.CompactTextString(m) }
func (*UnitState) ProtoMessage()               {}
func (*UnitState) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{13} }

type ScheduledUnits struct {
	Units []ScheduledUnit `protobuf:"bytes,1,rep,name=units" json:"units"`
}

func (m *ScheduledUnits) Reset()                    { *m = ScheduledUnits{} }
func (m *ScheduledUnits) String() string            { return proto.CompactTextString(m) }
func (*ScheduledUnits) ProtoMessage()               {}
func (*ScheduledUnits) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{14} }

func (m *ScheduledUnits) GetUnits() []ScheduledUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

type ScheduledUnit struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CurrentState TargetState `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=rpc.TargetState" json:"current_state,omitempty"`
	MachineID    string      `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (m *ScheduledUnit) Reset()                    { *m = ScheduledUnit{} }
func (m *ScheduledUnit) String() string            { return proto.CompactTextString(m) }
func (*ScheduledUnit) ProtoMessage()               {}
func (*ScheduledUnit) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{15} }

type UnitName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UnitName) Reset()                    { *m = UnitName{} }
func (m *UnitName) String() string            { return proto.CompactTextString(m) }
func (*UnitName) ProtoMessage()               {}
func (*UnitName) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{16} }

type Unit struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Unit         UnitFile    `protobuf:"bytes,2,opt,name=unit" json:"unit"`
	DesiredState TargetState `protobuf:"varint,3,opt,name=desired_state,json=desiredState,proto3,enum=rpc.TargetState" json:"desired_state,omitempty"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{17} }

func (m *Unit) GetUnit() UnitFile {
	if m != nil {
		return m.Unit
	}
	return UnitFile{}
}

type MaybeScheduledUnit struct {
	// Types that are valid to be assigned to IsScheduled:
	//	*MaybeScheduledUnit_Unit
	//	*MaybeScheduledUnit_Notfound
	IsScheduled isMaybeScheduledUnit_IsScheduled `protobuf_oneof:"is_scheduled"`
}

func (m *MaybeScheduledUnit) Reset()                    { *m = MaybeScheduledUnit{} }
func (m *MaybeScheduledUnit) String() string            { return proto.CompactTextString(m) }
func (*MaybeScheduledUnit) ProtoMessage()               {}
func (*MaybeScheduledUnit) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{18} }

type isMaybeScheduledUnit_IsScheduled interface {
	isMaybeScheduledUnit_IsScheduled()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaybeScheduledUnit_Unit struct {
	Unit *ScheduledUnit `protobuf:"bytes,1,opt,name=unit,oneof"`
}
type MaybeScheduledUnit_Notfound struct {
	Notfound *NotFound `protobuf:"bytes,2,opt,name=notfound,oneof"`
}

func (*MaybeScheduledUnit_Unit) isMaybeScheduledUnit_IsScheduled()     {}
func (*MaybeScheduledUnit_Notfound) isMaybeScheduledUnit_IsScheduled() {}

func (m *MaybeScheduledUnit) GetIsScheduled() isMaybeScheduledUnit_IsScheduled {
	if m != nil {
		return m.IsScheduled
	}
	return nil
}

func (m *MaybeScheduledUnit) GetUnit() *ScheduledUnit {
	if x, ok := m.GetIsScheduled().(*MaybeScheduledUnit_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MaybeScheduledUnit) GetNotfound() *NotFound {
	if x, ok := m.GetIsScheduled().(*MaybeScheduledUnit_Notfound); ok {
		return x.Notfound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaybeScheduledUnit) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MaybeScheduledUnit_OneofMarshaler, _MaybeScheduledUnit_OneofUnmarshaler, _MaybeScheduledUnit_OneofSizer, []interface{}{
		(*MaybeScheduledUnit_Unit)(nil),
		(*MaybeScheduledUnit_Notfound)(nil),
	}
}

func _MaybeScheduledUnit_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaybeScheduledUnit)
	// is_scheduled
	switch x := m.IsScheduled.(type) {
	case *MaybeScheduledUnit_Unit:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unit); err != nil {
			return err
		}
	case *MaybeScheduledUnit_Notfound:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notfound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaybeScheduledUnit.IsScheduled has unexpected type %T", x)
	}
	return nil
}

func _MaybeScheduledUnit_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaybeScheduledUnit)
	switch tag {
	case 1: // is_scheduled.unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduledUnit)
		err := b.DecodeMessage(msg)
		m.IsScheduled = &MaybeScheduledUnit_Unit{msg}
		return true, err
	case 2: // is_scheduled.notfound
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotFound)
		err := b.DecodeMessage(msg)
		m.IsScheduled = &MaybeScheduledUnit_Notfound{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MaybeScheduledUnit_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MaybeScheduledUnit)
	// is_scheduled
	switch x := m.IsScheduled.(type) {
	case *MaybeScheduledUnit_Unit:
		s := proto.Size(x.Unit)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaybeScheduledUnit_Notfound:
		s := proto.Size(x.Notfound)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MaybeUnit struct {
	// Types that are valid to be assigned to HasUnit:
	//	*MaybeUnit_Unit
	//	*MaybeUnit_Notfound
	HasUnit isMaybeUnit_HasUnit `protobuf_oneof:"has_unit"`
}

func (m *MaybeUnit) Reset()                    { *m = MaybeUnit{} }
func (m *MaybeUnit) String() string            { return proto.CompactTextString(m) }
func (*MaybeUnit) ProtoMessage()               {}
func (*MaybeUnit) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{19} }

type isMaybeUnit_HasUnit interface {
	isMaybeUnit_HasUnit()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaybeUnit_Unit struct {
	Unit *Unit `protobuf:"bytes,1,opt,name=unit,oneof"`
}
type MaybeUnit_Notfound struct {
	Notfound *NotFound `protobuf:"bytes,2,opt,name=notfound,oneof"`
}

func (*MaybeUnit_Unit) isMaybeUnit_HasUnit()     {}
func (*MaybeUnit_Notfound) isMaybeUnit_HasUnit() {}

func (m *MaybeUnit) GetHasUnit() isMaybeUnit_HasUnit {
	if m != nil {
		return m.HasUnit
	}
	return nil
}

func (m *MaybeUnit) GetUnit() *Unit {
	if x, ok := m.GetHasUnit().(*MaybeUnit_Unit); ok {
		return x.Unit
	}
	return nil
}

func (m *MaybeUnit) GetNotfound() *NotFound {
	if x, ok := m.GetHasUnit().(*MaybeUnit_Notfound); ok {
		return x.Notfound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MaybeUnit) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MaybeUnit_OneofMarshaler, _MaybeUnit_OneofUnmarshaler, _MaybeUnit_OneofSizer, []interface{}{
		(*MaybeUnit_Unit)(nil),
		(*MaybeUnit_Notfound)(nil),
	}
}

func _MaybeUnit_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MaybeUnit)
	// has_unit
	switch x := m.HasUnit.(type) {
	case *MaybeUnit_Unit:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unit); err != nil {
			return err
		}
	case *MaybeUnit_Notfound:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Notfound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MaybeUnit.HasUnit has unexpected type %T", x)
	}
	return nil
}

func _MaybeUnit_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MaybeUnit)
	switch tag {
	case 1: // has_unit.unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unit)
		err := b.DecodeMessage(msg)
		m.HasUnit = &MaybeUnit_Unit{msg}
		return true, err
	case 2: // has_unit.notfound
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotFound)
		err := b.DecodeMessage(msg)
		m.HasUnit = &MaybeUnit_Notfound{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MaybeUnit_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MaybeUnit)
	// has_unit
	switch x := m.HasUnit.(type) {
	case *MaybeUnit_Unit:
		s := proto.Size(x.Unit)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MaybeUnit_Notfound:
		s := proto.Size(x.Notfound)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NotFound struct {
}

func (m *NotFound) Reset()                    { *m = NotFound{} }
func (m *NotFound) String() string            { return proto.CompactTextString(m) }
func (*NotFound) ProtoMessage()               {}
func (*NotFound) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{20} }

type UnitFile struct {
	UnitOptions []UnitOption `protobuf:"bytes,1,rep,name=unit_options,json=unitOptions" json:"unit_options"`
}

func (m *UnitFile) Reset()                    { *m = UnitFile{} }
func (m *UnitFile) String() string            { return proto.CompactTextString(m) }
func (*UnitFile) ProtoMessage()               {}
func (*UnitFile) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{21} }

func (m *UnitFile) GetUnitOptions() []UnitOption {
	if m != nil {
		return m.UnitOptions
	}
	return nil
}

type UnitOption struct {
	Section string `protobuf:"bytes,1,opt,name=section,proto3" json:"section,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UnitOption) Reset()                    { *m = UnitOption{} }
func (m *UnitOption) String() string            { return proto.CompactTextString(m) }
func (*UnitOption) ProtoMessage()               {}
func (*UnitOption) Descriptor() ([]byte, []int) { return fileDescriptorFleet, []int{22} }

func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "rpc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "rpc.HealthCheckResponse")
	proto.RegisterType((*MachineProperties)(nil), "rpc.MachineProperties")
	proto.RegisterType((*UpdatedState)(nil), "rpc.UpdatedState")
	proto.RegisterType((*UnitStateFilter)(nil), "rpc.UnitStateFilter")
	proto.RegisterType((*UnitFilter)(nil), "rpc.UnitFilter")
	proto.RegisterType((*ScheduleUnitRequest)(nil), "rpc.ScheduleUnitRequest")
	proto.RegisterType((*UnscheduleUnitRequest)(nil), "rpc.UnscheduleUnitRequest")
	proto.RegisterType((*SaveUnitStateRequest)(nil), "rpc.SaveUnitStateRequest")
	proto.RegisterType((*Heartbeat)(nil), "rpc.Heartbeat")
	proto.RegisterType((*GenericReply)(nil), "rpc.GenericReply")
	proto.RegisterType((*Units)(nil), "rpc.Units")
	proto.RegisterType((*UnitStates)(nil), "rpc.UnitStates")
	proto.RegisterType((*UnitState)(nil), "rpc.UnitState")
	proto.RegisterType((*ScheduledUnits)(nil), "rpc.ScheduledUnits")
	proto.RegisterType((*ScheduledUnit)(nil), "rpc.ScheduledUnit")
	proto.RegisterType((*UnitName)(nil), "rpc.UnitName")
	proto.RegisterType((*Unit)(nil), "rpc.Unit")
	proto.RegisterType((*MaybeScheduledUnit)(nil), "rpc.MaybeScheduledUnit")
	proto.RegisterType((*MaybeUnit)(nil), "rpc.MaybeUnit")
	proto.RegisterType((*NotFound)(nil), "rpc.NotFound")
	proto.RegisterType((*UnitFile)(nil), "rpc.UnitFile")
	proto.RegisterType((*UnitOption)(nil), "rpc.UnitOption")
	proto.RegisterEnum("rpc.TargetState", TargetState_name, TargetState_value)
	proto.RegisterEnum("rpc.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	// agents should request only the locally scheduled jobs
	GetScheduledUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*ScheduledUnits, error)
	// should _never_ be used? fleetctl only ?
	GetScheduledUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeScheduledUnit, error)
	// should _never_ be used ?
	GetUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeUnit, error)
	GetUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*Units, error)
	// global status <= pretty much like list-unit-files
	GetUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*UnitState, error)
	GetUnitStates(ctx context.Context, in *UnitStateFilter, opts ...grpc.CallOption) (*UnitStates, error)
	ClearUnitHeartbeat(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	CreateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*GenericReply, error)
	DestroyUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	UnitHeartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*GenericReply, error)
	// mix heartbeat with *ttl''
	RemoveUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error)
	SaveUnitState(ctx context.Context, in *SaveUnitStateRequest, opts ...grpc.CallOption) (*GenericReply, error)
	ScheduleUnit(ctx context.Context, in *ScheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error)
	SetUnitTargetState(ctx context.Context, in *ScheduledUnit, opts ...grpc.CallOption) (*GenericReply, error)
	UnscheduleUnit(ctx context.Context, in *UnscheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error)
	AgentEvents(ctx context.Context, in *MachineProperties, opts ...grpc.CallOption) (Registry_AgentEventsClient, error)
	// Health check
	Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetScheduledUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*ScheduledUnits, error) {
	out := new(ScheduledUnits)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetScheduledUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetScheduledUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeScheduledUnit, error) {
	out := new(MaybeScheduledUnit)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetScheduledUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*MaybeUnit, error) {
	out := new(MaybeUnit)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnits(ctx context.Context, in *UnitFilter, opts ...grpc.CallOption) (*Units, error) {
	out := new(Units)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*UnitState, error) {
	out := new(UnitState)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnitState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetUnitStates(ctx context.Context, in *UnitStateFilter, opts ...grpc.CallOption) (*UnitStates, error) {
	out := new(UnitStates)
	err := grpc.Invoke(ctx, "/rpc.Registry/GetUnitStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ClearUnitHeartbeat(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/ClearUnitHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/CreateUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DestroyUnit(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/DestroyUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnitHeartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/UnitHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RemoveUnitState(ctx context.Context, in *UnitName, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/RemoveUnitState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SaveUnitState(ctx context.Context, in *SaveUnitStateRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/SaveUnitState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ScheduleUnit(ctx context.Context, in *ScheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/ScheduleUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetUnitTargetState(ctx context.Context, in *ScheduledUnit, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/SetUnitTargetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnscheduleUnit(ctx context.Context, in *UnscheduleUnitRequest, opts ...grpc.CallOption) (*GenericReply, error) {
	out := new(GenericReply)
	err := grpc.Invoke(ctx, "/rpc.Registry/UnscheduleUnit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AgentEvents(ctx context.Context, in *MachineProperties, opts ...grpc.CallOption) (Registry_AgentEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Registry_serviceDesc.Streams[0], c.cc, "/rpc.Registry/AgentEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryAgentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_AgentEventsClient interface {
	Recv() (*UpdatedState, error)
	grpc.ClientStream
}

type registryAgentEventsClient struct {
	grpc.ClientStream
}

func (x *registryAgentEventsClient) Recv() (*UpdatedState, error) {
	m := new(UpdatedState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/rpc.Registry/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	// agents should request only the locally scheduled jobs
	GetScheduledUnits(context.Context, *UnitFilter) (*ScheduledUnits, error)
	// should _never_ be used? fleetctl only ?
	GetScheduledUnit(context.Context, *UnitName) (*MaybeScheduledUnit, error)
	// should _never_ be used ?
	GetUnit(context.Context, *UnitName) (*MaybeUnit, error)
	GetUnits(context.Context, *UnitFilter) (*Units, error)
	// global status <= pretty much like list-unit-files
	GetUnitState(context.Context, *UnitName) (*UnitState, error)
	GetUnitStates(context.Context, *UnitStateFilter) (*UnitStates, error)
	ClearUnitHeartbeat(context.Context, *UnitName) (*GenericReply, error)
	CreateUnit(context.Context, *Unit) (*GenericReply, error)
	DestroyUnit(context.Context, *UnitName) (*GenericReply, error)
	UnitHeartbeat(context.Context, *Heartbeat) (*GenericReply, error)
	// mix heartbeat with *ttl''
	RemoveUnitState(context.Context, *UnitName) (*GenericReply, error)
	SaveUnitState(context.Context, *SaveUnitStateRequest) (*GenericReply, error)
	ScheduleUnit(context.Context, *ScheduleUnitRequest) (*GenericReply, error)
	SetUnitTargetState(context.Context, *ScheduledUnit) (*GenericReply, error)
	UnscheduleUnit(context.Context, *UnscheduleUnitRequest) (*GenericReply, error)
	AgentEvents(*MachineProperties, Registry_AgentEventsServer) error
	// Health check
	Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetScheduledUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetScheduledUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetScheduledUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetScheduledUnits(ctx, req.(*UnitFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetScheduledUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetScheduledUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetScheduledUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetScheduledUnit(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetUnit(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetUnits(ctx, req.(*UnitFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetUnitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetUnitState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetUnitState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetUnitState(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetUnitStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitStateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetUnitStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/GetUnitStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetUnitStates(ctx, req.(*UnitStateFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ClearUnitHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ClearUnitHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/ClearUnitHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ClearUnitHeartbeat(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/CreateUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateUnit(ctx, req.(*Unit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DestroyUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DestroyUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/DestroyUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DestroyUnit(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnitHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnitHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/UnitHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnitHeartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RemoveUnitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RemoveUnitState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/RemoveUnitState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RemoveUnitState(ctx, req.(*UnitName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SaveUnitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUnitStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SaveUnitState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/SaveUnitState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SaveUnitState(ctx, req.(*SaveUnitStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ScheduleUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ScheduleUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/ScheduleUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ScheduleUnit(ctx, req.(*ScheduleUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetUnitTargetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetUnitTargetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/SetUnitTargetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetUnitTargetState(ctx, req.(*ScheduledUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnscheduleUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnscheduleUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnscheduleUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/UnscheduleUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnscheduleUnit(ctx, req.(*UnscheduleUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MachineProperties)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).AgentEvents(m, &registryAgentEventsServer{stream})
}

type Registry_AgentEventsServer interface {
	Send(*UpdatedState) error
	grpc.ServerStream
}

type registryAgentEventsServer struct {
	grpc.ServerStream
}

func (x *registryAgentEventsServer) Send(m *UpdatedState) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Registry/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Status(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScheduledUnits",
			Handler:    _Registry_GetScheduledUnits_Handler,
		},
		{
			MethodName: "GetScheduledUnit",
			Handler:    _Registry_GetScheduledUnit_Handler,
		},
		{
			MethodName: "GetUnit",
			Handler:    _Registry_GetUnit_Handler,
		},
		{
			MethodName: "GetUnits",
			Handler:    _Registry_GetUnits_Handler,
		},
		{
			MethodName: "GetUnitState",
			Handler:    _Registry_GetUnitState_Handler,
		},
		{
			MethodName: "GetUnitStates",
			Handler:    _Registry_GetUnitStates_Handler,
		},
		{
			MethodName: "ClearUnitHeartbeat",
			Handler:    _Registry_ClearUnitHeartbeat_Handler,
		},
		{
			MethodName: "CreateUnit",
			Handler:    _Registry_CreateUnit_Handler,
		},
		{
			MethodName: "DestroyUnit",
			Handler:    _Registry_DestroyUnit_Handler,
		},
		{
			MethodName: "UnitHeartbeat",
			Handler:    _Registry_UnitHeartbeat_Handler,
		},
		{
			MethodName: "RemoveUnitState",
			Handler:    _Registry_RemoveUnitState_Handler,
		},
		{
			MethodName: "SaveUnitState",
			Handler:    _Registry_SaveUnitState_Handler,
		},
		{
			MethodName: "ScheduleUnit",
			Handler:    _Registry_ScheduleUnit_Handler,
		},
		{
			MethodName: "SetUnitTargetState",
			Handler:    _Registry_SetUnitTargetState_Handler,
		},
		{
			MethodName: "UnscheduleUnit",
			Handler:    _Registry_UnscheduleUnit_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Registry_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentEvents",
			Handler:       _Registry_AgentEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fleet.proto",
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *MachineProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *UpdatedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitIds) > 0 {
		for _, s := range m.UnitIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UnitStateFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitStateFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.LoadState) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.LoadState)))
		i += copy(dAtA[i:], m.LoadState)
	}
	if len(m.ActiveState) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.ActiveState)))
		i += copy(dAtA[i:], m.ActiveState)
	}
	if len(m.SubState) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.SubState)))
		i += copy(dAtA[i:], m.SubState)
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnitFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MachineID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *ScheduleUnitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleUnitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnscheduleUnitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnscheduleUnitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *SaveUnitStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveUnitStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.State.Size()))
		n1, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TTL != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.TTL))
	}
	return i, nil
}

func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	if m.TTL != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.TTL))
	}
	return i, nil
}

func (m *GenericReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Units) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Units) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitStates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitStates) > 0 {
		for _, msg := range m.UnitStates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.LoadState) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.LoadState)))
		i += copy(dAtA[i:], m.LoadState)
	}
	if len(m.ActiveState) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.ActiveState)))
		i += copy(dAtA[i:], m.ActiveState)
	}
	if len(m.SubState) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.SubState)))
		i += copy(dAtA[i:], m.SubState)
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *ScheduledUnits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledUnits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ScheduledUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.CurrentState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.CurrentState))
	}
	if len(m.MachineID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.MachineID)))
		i += copy(dAtA[i:], m.MachineID)
	}
	return i, nil
}

func (m *UnitName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Unit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintFleet(dAtA, i, uint64(m.Unit.Size()))
	n2, err := m.Unit.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.DesiredState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.DesiredState))
	}
	return i, nil
}

func (m *MaybeScheduledUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaybeScheduledUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsScheduled != nil {
		nn3, err := m.IsScheduled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *MaybeScheduledUnit_Unit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Unit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.Unit.Size()))
		n4, err := m.Unit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *MaybeScheduledUnit_Notfound) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Notfound != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.Notfound.Size()))
		n5, err := m.Notfound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *MaybeUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaybeUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasUnit != nil {
		nn6, err := m.HasUnit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *MaybeUnit_Unit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Unit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.Unit.Size()))
		n7, err := m.Unit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *MaybeUnit_Notfound) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Notfound != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(m.Notfound.Size()))
		n8, err := m.Notfound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *NotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnitFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitOptions) > 0 {
		for _, msg := range m.UnitOptions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFleet(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnitOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Section) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Section)))
		i += copy(dAtA[i:], m.Section)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeFixed64Fleet(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fleet(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFleet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HealthCheckRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovFleet(uint64(m.Status))
	}
	return n
}

func (m *MachineProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UpdatedState) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitIds) > 0 {
		for _, s := range m.UnitIds {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitStateFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.LoadState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.ActiveState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.SubState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnitFilter) Size() (n int) {
	var l int
	_ = l
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *ScheduleUnitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnscheduleUnitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *SaveUnitStateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovFleet(uint64(m.TTL))
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovFleet(uint64(m.TTL))
	}
	return n
}

func (m *GenericReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Units) Size() (n int) {
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitStates) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitStates) > 0 {
		for _, e := range m.UnitStates {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.LoadState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.ActiveState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.SubState)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *ScheduledUnits) Size() (n int) {
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *ScheduledUnit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.CurrentState != 0 {
		n += 1 + sovFleet(uint64(m.CurrentState))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *UnitName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func (m *Unit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = m.Unit.Size()
	n += 1 + l + sovFleet(uint64(l))
	if m.DesiredState != 0 {
		n += 1 + sovFleet(uint64(m.DesiredState))
	}
	return n
}

func (m *MaybeScheduledUnit) Size() (n int) {
	var l int
	_ = l
	if m.IsScheduled != nil {
		n += m.IsScheduled.Size()
	}
	return n
}

func (m *MaybeScheduledUnit_Unit) Size() (n int) {
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeScheduledUnit_Notfound) Size() (n int) {
	var l int
	_ = l
	if m.Notfound != nil {
		l = m.Notfound.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeUnit) Size() (n int) {
	var l int
	_ = l
	if m.HasUnit != nil {
		n += m.HasUnit.Size()
	}
	return n
}

func (m *MaybeUnit_Unit) Size() (n int) {
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *MaybeUnit_Notfound) Size() (n int) {
	var l int
	_ = l
	if m.Notfound != nil {
		l = m.Notfound.Size()
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}
func (m *NotFound) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UnitFile) Size() (n int) {
	var l int
	_ = l
	if len(m.UnitOptions) > 0 {
		for _, e := range m.UnitOptions {
			l = e.Size()
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	return n
}

func (m *UnitOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	return n
}

func sovFleet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFleet(x uint64) (n int) {
	return sovFleet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (HealthCheckResponse_ServingStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitIds = append(m.UnitIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitStateFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitStateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitStateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleUnitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleUnitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleUnitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnscheduleUnitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnscheduleUnitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnscheduleUnitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveUnitStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveUnitStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveUnitStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &UnitState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Units) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Units: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Units: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, Unit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitStates = append(m.UnitStates, &UnitState{})
			if err := m.UnitStates[len(m.UnitStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledUnits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledUnits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledUnits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, ScheduledUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentState", wireType)
			}
			m.CurrentState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentState |= (TargetState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredState", wireType)
			}
			m.DesiredState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredState |= (TargetState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaybeScheduledUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaybeScheduledUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaybeScheduledUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScheduledUnit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IsScheduled = &MaybeScheduledUnit_Unit{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notfound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IsScheduled = &MaybeScheduledUnit_Notfound{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaybeUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaybeUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaybeUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Unit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HasUnit = &MaybeUnit_Unit{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notfound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotFound{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HasUnit = &MaybeUnit_Notfound{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitOptions = append(m.UnitOptions, UnitOption{})
			if err := m.UnitOptions[len(m.UnitOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFleet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFleet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFleet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFleet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFleet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFleet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fleet.proto", fileDescriptorFleet) }

var fileDescriptorFleet = []byte{
	// 1106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x56, 0xdb, 0x72, 0xdb, 0x44,
	0x18, 0x8e, 0xec, 0x38, 0xb1, 0x7f, 0x1f, 0xbb, 0x09, 0xd4, 0x09, 0x43, 0x02, 0xe2, 0xd0, 0x52,
	0xa8, 0xc3, 0xb8, 0xd3, 0x0e, 0xa4, 0x53, 0x20, 0x89, 0x73, 0xf0, 0x90, 0x3a, 0x1d, 0x39, 0x69,
	0x87, 0x2b, 0x8f, 0x2c, 0xfd, 0xb1, 0x35, 0x55, 0x24, 0xa3, 0x5d, 0x65, 0x26, 0xf0, 0x02, 0xdc,
	0xf2, 0x1e, 0x3c, 0x04, 0x57, 0x4c, 0x2f, 0xfb, 0x04, 0x19, 0xc8, 0x93, 0x30, 0x7b, 0x90, 0x2c,
	0xb9, 0x6a, 0xd3, 0x61, 0xe0, 0x82, 0x3b, 0xfd, 0x87, 0x6f, 0xff, 0xd3, 0xb7, 0xda, 0x1f, 0xca,
	0xa7, 0x2e, 0x22, 0x6b, 0x4d, 0x02, 0x9f, 0xf9, 0x24, 0x1f, 0x4c, 0xac, 0xd5, 0xbb, 0x23, 0x87,
	0x8d, 0xc3, 0x61, 0xcb, 0xf2, 0xcf, 0x36, 0x46, 0xfe, 0xc8, 0xdf, 0x10, 0xb6, 0x61, 0x78, 0x2a,
	0x24, 0x21, 0x88, 0x2f, 0x89, 0xd1, 0x5b, 0x40, 0x0e, 0xd0, 0x74, 0xd9, 0x78, 0x67, 0x8c, 0xd6,
	0x73, 0x03, 0x7f, 0x0c, 0x91, 0x32, 0xd2, 0x84, 0x45, 0x8a, 0xc1, 0xb9, 0x63, 0x61, 0x53, 0xfb,
	0x40, 0xbb, 0x5d, 0x32, 0x22, 0x51, 0xff, 0x55, 0x83, 0xa5, 0x14, 0x80, 0x4e, 0x7c, 0x8f, 0x22,
	0xf9, 0x06, 0x16, 0x28, 0x33, 0x59, 0x48, 0x05, 0xa0, 0xd6, 0xfe, 0xb4, 0x15, 0x4c, 0xac, 0x56,
	0x86, 0x67, 0xab, 0xcf, 0x4f, 0xf2, 0x46, 0x7d, 0xe1, 0x6d, 0x28, 0x94, 0xbe, 0x09, 0xd5, 0x94,
	0x81, 0x94, 0x61, 0xf1, 0xa4, 0xf7, 0x7d, 0xef, 0xe8, 0x59, 0xaf, 0x31, 0xc7, 0x85, 0xfe, 0xae,
	0xf1, 0xb4, 0xdb, 0xdb, 0x6f, 0x68, 0xa4, 0x0e, 0xe5, 0xde, 0xd1, 0xf1, 0x20, 0x52, 0xe4, 0xf4,
	0x8f, 0xe0, 0xc6, 0x63, 0xd3, 0x1a, 0x3b, 0x1e, 0x3e, 0x09, 0xfc, 0x09, 0x06, 0xcc, 0x41, 0x4a,
	0x6a, 0x90, 0x73, 0x6c, 0x95, 0x7d, 0xce, 0xb1, 0xf5, 0xcf, 0xa0, 0x72, 0x32, 0xb1, 0x4d, 0x86,
	0x36, 0x0f, 0x80, 0x64, 0x05, 0x8a, 0xa1, 0xe7, 0xb0, 0x81, 0x63, 0xf3, 0x94, 0xf3, 0xbc, 0x46,
	0x2e, 0x77, 0x6d, 0xaa, 0xff, 0xa1, 0x41, 0xfd, 0xc4, 0x73, 0x98, 0x70, 0xdc, 0x73, 0x5c, 0x86,
	0x01, 0x21, 0x30, 0xef, 0x99, 0x67, 0x51, 0x3b, 0xc4, 0x37, 0xd7, 0x8d, 0x4d, 0x3a, 0x6e, 0xe6,
	0xa4, 0x8e, 0x7f, 0x93, 0xf7, 0x01, 0x5c, 0xdf, 0xb4, 0x07, 0xbc, 0x2c, 0x6c, 0xe6, 0x85, 0xa5,
	0xc4, 0x35, 0x32, 0xea, 0x87, 0x50, 0x31, 0x2d, 0xe6, 0x9c, 0xa3, 0x72, 0x98, 0x17, 0x0e, 0x65,
	0xa9, 0x93, 0x2e, 0xef, 0x41, 0x89, 0x86, 0x43, 0x65, 0x2f, 0x08, 0x7b, 0x91, 0x86, 0x43, 0x69,
	0xfc, 0x02, 0xe0, 0x4c, 0x96, 0x3a, 0x70, 0xec, 0xe6, 0x02, 0xb7, 0x6e, 0x57, 0xaf, 0x2e, 0xd7,
	0x4b, 0xaa, 0x01, 0xdd, 0x8e, 0x51, 0x52, 0x0e, 0x5d, 0x5b, 0xdf, 0x04, 0xe0, 0x75, 0xa8, 0x12,
	0xd2, 0x58, 0xed, 0x1a, 0xec, 0x33, 0x58, 0xea, 0x5b, 0x63, 0xb4, 0x43, 0x17, 0xf9, 0x19, 0x11,
	0x33, 0xb2, 0xfa, 0x90, 0x3e, 0x38, 0x77, 0xcd, 0xc1, 0x3f, 0xc0, 0x3b, 0x27, 0x1e, 0xfd, 0x4f,
	0x8e, 0x7e, 0x0e, 0xcb, 0x7d, 0xf3, 0x1c, 0xe3, 0xd9, 0xbd, 0xe9, 0xe4, 0x8f, 0xa1, 0x20, 0x5b,
	0xcc, 0x0f, 0x2d, 0xb7, 0x6b, 0x82, 0xaf, 0x53, 0xa4, 0x34, 0x92, 0x15, 0xc8, 0x33, 0xe6, 0x8a,
	0x39, 0x16, 0xb6, 0x17, 0xaf, 0x2e, 0xd7, 0xf3, 0xc7, 0xc7, 0x87, 0x06, 0xd7, 0xe9, 0x63, 0x28,
	0x1d, 0xa0, 0x19, 0xb0, 0x21, 0x9a, 0xff, 0x42, 0xee, 0x6f, 0x8a, 0x54, 0x83, 0xca, 0x3e, 0x7a,
	0x18, 0x38, 0x96, 0x81, 0x13, 0xf7, 0x42, 0x6f, 0x41, 0x81, 0x27, 0x4a, 0xc9, 0x27, 0x50, 0xe0,
	0x9c, 0x95, 0x04, 0x2e, 0xb7, 0x4b, 0x71, 0x0d, 0xdb, 0xf3, 0x2f, 0x2e, 0xd7, 0xe7, 0x0c, 0x69,
	0xd5, 0x1f, 0x49, 0x1a, 0x88, 0xc2, 0x28, 0xd9, 0x80, 0xb2, 0x20, 0xbe, 0x28, 0x30, 0x82, 0xce,
	0x96, 0x0f, 0x61, 0x0c, 0xd0, 0x7f, 0xd7, 0xa0, 0x14, 0x5b, 0xfe, 0x9f, 0x17, 0xe1, 0x3b, 0xa8,
	0x45, 0x64, 0xb6, 0x65, 0xeb, 0x5a, 0xe9, 0xd6, 0x11, 0x51, 0x7f, 0xca, 0x27, 0xdd, 0xc3, 0x5f,
	0x34, 0xa8, 0xa6, 0xcc, 0x99, 0x8d, 0xb8, 0x0f, 0x55, 0x2b, 0x0c, 0x02, 0xf4, 0x54, 0x7b, 0x45,
	0x47, 0x6a, 0xed, 0x86, 0x38, 0xfd, 0xd8, 0x0c, 0x46, 0xa8, 0xfa, 0x5b, 0x51, 0x6e, 0x59, 0xc5,
	0xe4, 0xaf, 0x29, 0x66, 0x0d, 0x8a, 0x3c, 0x81, 0x9e, 0xea, 0xfc, 0x6c, 0x12, 0xfa, 0x4f, 0x30,
	0xff, 0xda, 0x04, 0x6f, 0xc1, 0x3c, 0xaf, 0x47, 0x91, 0xbe, 0x1a, 0x4f, 0x7d, 0xcf, 0x71, 0x51,
	0x15, 0x2c, 0x1c, 0x78, 0x25, 0x36, 0x52, 0x27, 0xc0, 0xe4, 0x04, 0x33, 0x2b, 0x51, 0x6e, 0x42,
	0xd2, 0x7f, 0x06, 0xf2, 0xd8, 0xbc, 0x18, 0x62, 0xba, 0x55, 0xb7, 0x55, 0x54, 0x4d, 0x44, 0xcd,
	0xe8, 0xf5, 0x41, 0x14, 0xf6, 0x73, 0x28, 0x7a, 0x3e, 0x3b, 0xf5, 0x43, 0xcf, 0x4e, 0xe5, 0xd8,
	0xf3, 0xd9, 0x1e, 0x57, 0x1e, 0xcc, 0x19, 0xb1, 0xc3, 0x76, 0x0d, 0x2a, 0x0e, 0x1d, 0x44, 0xbf,
	0x12, 0x5b, 0x47, 0x28, 0x89, 0xe0, 0x22, 0xe6, 0x7a, 0x2a, 0xe6, 0xf4, 0x6a, 0xfc, 0xb3, 0x50,
	0x00, 0xc5, 0xb1, 0x49, 0x07, 0x1c, 0xa8, 0x03, 0x14, 0x23, 0x1f, 0xbd, 0x23, 0x67, 0xc1, 0xdb,
	0x47, 0xbe, 0x82, 0x8a, 0xb8, 0x58, 0xfe, 0x84, 0x39, 0xbe, 0x17, 0x31, 0xab, 0x1e, 0x47, 0x3e,
	0x12, 0x7a, 0xd5, 0x65, 0x71, 0x07, 0xa5, 0x86, 0xea, 0x4f, 0xe4, 0x05, 0x95, 0xa2, 0x7c, 0x7c,
	0x2d, 0xfe, 0x39, 0x7d, 0x7c, 0x85, 0x18, 0x4f, 0x34, 0x97, 0x98, 0xe8, 0x32, 0x14, 0xce, 0x4d,
	0x37, 0x8c, 0xae, 0x98, 0x14, 0xee, 0xdc, 0x87, 0x72, 0x62, 0x48, 0xa4, 0x02, 0xc5, 0x6e, 0x6f,
	0x6b, 0xe7, 0xb8, 0xfb, 0x74, 0xb7, 0x31, 0x47, 0x00, 0x16, 0x0e, 0x8f, 0xb6, 0x3a, 0xbb, 0x9d,
	0x86, 0xc6, 0x2d, 0x87, 0x5b, 0x27, 0xbd, 0x9d, 0x83, 0xdd, 0x4e, 0x23, 0xd7, 0xfe, 0x6d, 0x11,
	0x8a, 0x06, 0x8e, 0x1c, 0xca, 0x82, 0x0b, 0xf2, 0x35, 0xdc, 0xd8, 0x47, 0x36, 0x73, 0x6f, 0xea,
	0x49, 0xca, 0x30, 0x0c, 0x56, 0x97, 0x5e, 0x9d, 0x26, 0x25, 0x9b, 0xd0, 0x98, 0x85, 0x92, 0x29,
	0xd9, 0x38, 0x73, 0x57, 0x6f, 0x0a, 0x31, 0x93, 0x2c, 0x8b, 0xfb, 0xc8, 0xb2, 0x20, 0xb5, 0x29,
	0x44, 0x98, 0x6f, 0x41, 0x51, 0x79, 0x66, 0xe4, 0x05, 0xb1, 0x82, 0x92, 0xbb, 0xfc, 0x07, 0xca,
	0xa6, 0xff, 0xb0, 0xcc, 0x73, 0xa7, 0xe6, 0x07, 0x50, 0x4d, 0xba, 0x53, 0xb2, 0x9c, 0x76, 0x50,
	0x11, 0xea, 0x69, 0x2d, 0x25, 0x0f, 0x80, 0xec, 0xb8, 0x68, 0x06, 0x82, 0x66, 0xf1, 0xd3, 0x30,
	0x13, 0xec, 0x86, 0x10, 0x93, 0xff, 0x73, 0x72, 0x07, 0x60, 0x27, 0x40, 0x93, 0xc9, 0xaa, 0xa6,
	0x54, 0xcd, 0xf2, 0xdd, 0x80, 0x72, 0x07, 0x29, 0x0b, 0xfc, 0x8b, 0xac, 0x0e, 0x65, 0x00, 0xda,
	0x50, 0x4d, 0xe7, 0x53, 0x8b, 0x36, 0x33, 0x29, 0x67, 0x61, 0xee, 0x41, 0xdd, 0xc0, 0x33, 0x3f,
	0xf1, 0x92, 0xbe, 0x45, 0xa0, 0x47, 0x50, 0x4d, 0x3d, 0xbe, 0x64, 0x45, 0x32, 0x23, 0xe3, 0x41,
	0xce, 0x82, 0x3f, 0x84, 0x4a, 0x72, 0xdf, 0x20, 0xcd, 0x14, 0xaf, 0x12, 0x7b, 0x42, 0x36, 0x98,
	0xf4, 0xe5, 0xc4, 0x92, 0xac, 0xcf, 0xf8, 0xd1, 0x64, 0x81, 0xbf, 0x85, 0x5a, 0x7a, 0x21, 0x21,
	0xab, 0xaa, 0x58, 0xfa, 0x76, 0xd1, 0x37, 0xa1, 0xbc, 0x35, 0x42, 0x8f, 0xed, 0x9e, 0xa3, 0xc7,
	0x28, 0x79, 0x57, 0xd1, 0x74, 0x66, 0x23, 0x55, 0xc8, 0xe4, 0x12, 0xfa, 0xa5, 0x46, 0x1e, 0xc2,
	0x82, 0x5a, 0x78, 0x6f, 0xbe, 0xba, 0x31, 0xcb, 0x88, 0xcd, 0xd7, 0xad, 0xd2, 0xdb, 0x8d, 0x97,
	0x7f, 0xad, 0x69, 0x2f, 0xae, 0xd6, 0xb4, 0x97, 0x57, 0x6b, 0xda, 0x9f, 0x57, 0x6b, 0xda, 0x70,
	0x41, 0x6c, 0xf5, 0xf7, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x64, 0x9f, 0x8f, 0x18, 0x0c,
	0x00, 0x00,
}
